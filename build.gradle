buildscript {
    ext.projectVersion = version
    ext.projectDesc = 'Skerna Logger multiplataforma.'
    ext.projectHost = 'https://gitlab.com/skerna/libs/commons-logger.git'
    ext.projectOrg = 'Skerna'
    ext.projectLicense = 'MIT'
    ext.projectDevelNick = 'ronfravi'
    ext.projectDevelName = 'Ronald CÃ¡rdenas'
    ext.projectInceptionYear = 2019

    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://kotlin.bintray.com/kotlinx/" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
    }
}
plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id "com.jfrog.bintray"
    id 'com.moowork.node'
    id 'org.jetbrains.dokka'
}
repositories {
    jcenter()
    mavenCentral()
    google()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://kotlin.bintray.com/kotlin-dev" }
    maven { url  "https://dl.bintray.com/skerna/maven" }
}
apply plugin: 'com.android.library'
apply plugin: "maven-publish"


configurations {
    compileClasspath
}


android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    sourceSets {
        main.java.srcDir('src/androidMain/kotlin')
        test.java.srcDir('src/androidTest/kotlin')
        androidTest.java.srcDirs += 'src/androidInstrumentTest/kotlin'
    }
}


//dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
//    api 'org.jetbrains.kotlin:kotlin-reflect'
//    api("io.skerna.libs:commons-sansi-jvm:$skerna_sansi_version")
//    api 'com.jraska:console:1.0.0'
//    api 'com.jakewharton.timber:timber:4.7.1'
//}

kotlin {
    jvm(){
        compilations.main.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = "1.6"
        }
        compilations.test.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = "1.6"
        }
    }
    android(){
        publishLibraryVariants("release", "debug")
    }
    js()
    targets {
        fromPreset(presets.jvm,'jvm')
        fromPreset(presets.android, 'android')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                api("io.skerna.libs:commons-sansi-metadata:$skerna_sansi_version")
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                api 'org.jetbrains.kotlin:kotlin-reflect'
                api("io.skerna.libs:commons-sansi-jvm:$skerna_sansi_version")
                compileOnly "org.slf4j:slf4j-simple:$slf4j_version"
                compileOnly "org.slf4j:slf4j-api:$slf4j_version"
                compileOnly "org.apache.logging.log4j:log4j-api:$log4j_version"
                compileOnly "org.apache.logging.log4j:log4j-core:$log4j_version"
                compileOnly "io.vertx:vertx-core:$vertx_version"

            }
        }
        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-junit"
                implementation "org.slf4j:slf4j-api:$slf4j_version"
                implementation "org.slf4j:slf4j-simple:$slf4j_version"
                implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
                implementation "org.apache.logging.log4j:log4j-core:$log4j_version"
                implementation "org.apache.logging.log4j:log4j-api:$log4j_version"
                implementation "io.vertx:vertx-core:$vertx_version"

            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                api("io.skerna.libs:commons-sansi-js:$skerna_sansi_version")
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
                implementation "org.jetbrains.kotlin:kotlin-test-js"

            }
        }
        androidMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                api("io.skerna.libs:commons-sansi-jvm:$skerna_sansi_version")
                api 'com.jraska:console:1.0.0'
                api 'com.jakewharton.timber:timber:4.7.1'
            }
        }
        androidTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-junit"
            }
        }
    }
}

compileKotlinJs {
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'umd'
    kotlinOptions.sourceMapEmbedSources = 'always'
}
compileTestKotlinJs {
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'umd'
    kotlinOptions.sourceMapEmbedSources = 'always'
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile.class).all {
    kotlinOptions {
        jvmTarget = "1.6"
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        apiVersion = "1.3"
        languageVersion = "1.3"
        jvmTarget = "1.6"
    }
}
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
        events = ["passed", "skipped", "failed", "standardOut", "standardError"]
    }
}


//apply from: rootProject.file("gradle/node.gradle")
//apply from: rootProject.file("gradle/test-mocha-js.gradle")

apply from: rootProject.file("gradle/publish.gradle")
apply from: project.file("gradle/wrapper.gradle")
